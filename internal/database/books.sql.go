// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addBookAuthor = `-- name: AddBookAuthor :exec
INSERT INTO book_authors (book_id, author_id)
VALUES ($1, $2)
`

type AddBookAuthorParams struct {
	BookID   int32
	AuthorID int32
}

func (q *Queries) AddBookAuthor(ctx context.Context, arg AddBookAuthorParams) error {
	_, err := q.db.ExecContext(ctx, addBookAuthor, arg.BookID, arg.AuthorID)
	return err
}

const addBookCategory = `-- name: AddBookCategory :exec
INSERT INTO book_categories (book_id, category_id)
VALUES ($1, $2)
`

type AddBookCategoryParams struct {
	BookID     int32
	CategoryID int32
}

func (q *Queries) AddBookCategory(ctx context.Context, arg AddBookCategoryParams) error {
	_, err := q.db.ExecContext(ctx, addBookCategory, arg.BookID, arg.CategoryID)
	return err
}

const addBookFavorite = `-- name: AddBookFavorite :exec
INSERT INTO book_favorites (user_id, book_id)
VALUES ($1, $2)
`

type AddBookFavoriteParams struct {
	UserID int32
	BookID int32
}

func (q *Queries) AddBookFavorite(ctx context.Context, arg AddBookFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, addBookFavorite, arg.UserID, arg.BookID)
	return err
}

const createBook = `-- name: CreateBook :one

INSERT INTO books (vendor_id, title, description, price, rate)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, vendor_id, title, description, price, rate, created_at, updated_at
`

type CreateBookParams struct {
	VendorID    int32
	Title       string
	Description string
	Price       string
	Rate        string
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.VendorID,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.Rate,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Rate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, vendor_id, title, description, price, rate, created_at, updated_at
FROM books
ORDER BY id DESC
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.VendorID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Rate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBooksDetails = `-- name: GetBooksDetails :many

SELECT b.id                AS book_id,
       b.title,
       b.description,
       b.price,
       b.rate,
       b.vendor_id,
       b.created_at,
       b.updated_at,

       v.id                AS vendor_id,
       v.name              AS vendor_name,
       v.avatar_url        AS vendor_avatar_url,
       v.rate              AS vendor_rate,

       a.id                AS author_id,
       a.name              AS author_name,
       a.short_description AS author_short_description,
       a.about             AS author_about,
       a.avatar_url        AS author_avatar_url,
       a.rate              AS author_rate,
       a.author_type,

       c.id                AS category_id,
       c.name              AS category_name

FROM books b
         JOIN vendors v ON b.vendor_id = v.id
         LEFT JOIN book_authors ba ON b.id = ba.book_id
         LEFT JOIN authors a ON a.id = ba.author_id
         LEFT JOIN book_categories bc ON b.id = bc.book_id
         LEFT JOIN categories c ON c.id = bc.category_id
WHERE ($1::int IS NULL OR c.id = $1)
  AND ($2::int IS NULL OR b.vendor_id = $2)
  AND ($3::int IS NULL OR a.id = $3)
  AND ($4::int IS NULL OR b.id = $4)
`

type GetBooksDetailsParams struct {
	CategoryID sql.NullInt32
	VendorID   sql.NullInt32
	AuthorID   sql.NullInt32
	BookID     sql.NullInt32
}

type GetBooksDetailsRow struct {
	BookID                 int32
	Title                  string
	Description            string
	Price                  string
	Rate                   string
	VendorID               int32
	CreatedAt              time.Time
	UpdatedAt              time.Time
	VendorID_2             int32
	VendorName             string
	VendorAvatarUrl        string
	VendorRate             string
	AuthorID               sql.NullInt32
	AuthorName             sql.NullString
	AuthorShortDescription sql.NullString
	AuthorAbout            sql.NullString
	AuthorAvatarUrl        sql.NullString
	AuthorRate             sql.NullString
	AuthorType             NullAuthorTypeEnum
	CategoryID             sql.NullInt32
	CategoryName           sql.NullString
}

func (q *Queries) GetBooksDetails(ctx context.Context, arg GetBooksDetailsParams) ([]GetBooksDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBooksDetails,
		arg.CategoryID,
		arg.VendorID,
		arg.AuthorID,
		arg.BookID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBooksDetailsRow
	for rows.Next() {
		var i GetBooksDetailsRow
		if err := rows.Scan(
			&i.BookID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Rate,
			&i.VendorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.VendorID_2,
			&i.VendorName,
			&i.VendorAvatarUrl,
			&i.VendorRate,
			&i.AuthorID,
			&i.AuthorName,
			&i.AuthorShortDescription,
			&i.AuthorAbout,
			&i.AuthorAvatarUrl,
			&i.AuthorRate,
			&i.AuthorType,
			&i.CategoryID,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeBookFavorite = `-- name: RemoveBookFavorite :exec
DELETE FROM book_favorites
WHERE user_id = $1 AND book_id = $2
`

type RemoveBookFavoriteParams struct {
	UserID int32
	BookID int32
}

func (q *Queries) RemoveBookFavorite(ctx context.Context, arg RemoveBookFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, removeBookFavorite, arg.UserID, arg.BookID)
	return err
}
