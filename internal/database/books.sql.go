// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package database

import (
	"context"
)

const addBookAuthor = `-- name: AddBookAuthor :exec
INSERT INTO book_authors (book_id, author_id)
VALUES ($1, $2)
`

type AddBookAuthorParams struct {
	BookID   int32
	AuthorID int32
}

func (q *Queries) AddBookAuthor(ctx context.Context, arg AddBookAuthorParams) error {
	_, err := q.db.ExecContext(ctx, addBookAuthor, arg.BookID, arg.AuthorID)
	return err
}

const addBookCategory = `-- name: AddBookCategory :exec
INSERT INTO book_categories (book_id, category_id)
VALUES ($1, $2)
`

type AddBookCategoryParams struct {
	BookID     int32
	CategoryID int32
}

func (q *Queries) AddBookCategory(ctx context.Context, arg AddBookCategoryParams) error {
	_, err := q.db.ExecContext(ctx, addBookCategory, arg.BookID, arg.CategoryID)
	return err
}

const createBook = `-- name: CreateBook :one

INSERT INTO books (vendor_id, title, description, price, rate)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, vendor_id, title, description, price, rate, created_at, updated_at
`

type CreateBookParams struct {
	VendorID    int32
	Title       string
	Description string
	Price       string
	Rate        string
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.VendorID,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.Rate,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.VendorID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Rate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
