// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: addresses.sql

package database

import (
	"context"
)

const createAddress = `-- name: CreateAddress :one

INSERT INTO addresses
    (user_id, title, phone_number, governorate, city, address_details)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, title, phone_number, governorate, city, address_details, created_at, updated_at
`

type CreateAddressParams struct {
	UserID         int32
	Title          string
	PhoneNumber    string
	Governorate    string
	City           string
	AddressDetails string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.UserID,
		arg.Title,
		arg.PhoneNumber,
		arg.Governorate,
		arg.City,
		arg.AddressDetails,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.PhoneNumber,
		&i.Governorate,
		&i.City,
		&i.AddressDetails,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE
FROM addresses
WHERE id = $1
  AND user_id = $2
`

type DeleteAddressParams struct {
	ID     int32
	UserID int32
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, arg.ID, arg.UserID)
	return err
}

const getAddresses = `-- name: GetAddresses :many

SELECT id, user_id, title, phone_number, governorate, city, address_details, created_at, updated_at
FROM addresses
WHERE user_id = $1
ORDER BY id DESC
`

func (q *Queries) GetAddresses(ctx context.Context, userID int32) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.PhoneNumber,
			&i.Governorate,
			&i.City,
			&i.AddressDetails,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE addresses
SET title           = COALESCE($1, title),
    phone_number    = COALESCE($2, phone_number),
    governorate     = COALESCE($3, governorate),
    city            = COALESCE($4, city),
    address_details = COALESCE($5, address_details),
    updated_at      = NOW()
WHERE id = $6
  AND user_id = $7
RETURNING id, user_id, title, phone_number, governorate, city, address_details, created_at, updated_at
`

type UpdateAddressParams struct {
	Title          string
	PhoneNumber    string
	Governorate    string
	City           string
	AddressDetails string
	ID             int32
	UserID         int32
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, updateAddress,
		arg.Title,
		arg.PhoneNumber,
		arg.Governorate,
		arg.City,
		arg.AddressDetails,
		arg.ID,
		arg.UserID,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.PhoneNumber,
		&i.Governorate,
		&i.City,
		&i.AddressDetails,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
