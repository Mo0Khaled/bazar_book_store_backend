// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createApiToken = `-- name: CreateApiToken :one

INSERT INTO api_tokens (api_token, expires_at, request_limit, last_reset)
VALUES ($1, $2, $3, $4)
RETURNING api_token, created_at, expires_at, request_limit, last_reset
`

type CreateApiTokenParams struct {
	ApiToken     string
	ExpiresAt    time.Time
	RequestLimit int32
	LastReset    sql.NullTime
}

func (q *Queries) CreateApiToken(ctx context.Context, arg CreateApiTokenParams) (ApiToken, error) {
	row := q.db.QueryRowContext(ctx, createApiToken,
		arg.ApiToken,
		arg.ExpiresAt,
		arg.RequestLimit,
		arg.LastReset,
	)
	var i ApiToken
	err := row.Scan(
		&i.ApiToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RequestLimit,
		&i.LastReset,
	)
	return i, err
}

const getApiToken = `-- name: GetApiToken :one

SELECT api_token, created_at, expires_at, request_limit, last_reset
FROM api_tokens
WHERE api_token = $1
`

func (q *Queries) GetApiToken(ctx context.Context, apiToken string) (ApiToken, error) {
	row := q.db.QueryRowContext(ctx, getApiToken, apiToken)
	var i ApiToken
	err := row.Scan(
		&i.ApiToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.RequestLimit,
		&i.LastReset,
	)
	return i, err
}
